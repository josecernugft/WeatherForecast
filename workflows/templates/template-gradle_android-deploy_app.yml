parameters:
  - name: 'vmImage'
    default: 'macos-latest'
    type: string

  - name: 'buildType'
    default: 'debug'
    type: string

jobs:
  - job: Build
    pool:
      vmImage: ${{ parameters.vmImage }}
    steps:
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            # Write your commands here
            yes | ~/Library/Android/sdk/tools/bin/sdkmanager --licenses --sdk_root=$ANDROID_SDK_PATH
            #!/usr/bin/env bash
            echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --install 'system-images;android-27;google_apis;x86'
            $ANDROID_HOME/platform-tools/adb devices
            echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd -n test_android_emulator -k 'system-images;android-27;google_apis;x86' --force
            nohup $ANDROID_HOME/emulator/emulator -avd test_android_emulator -no-snapshot > /dev/null 2>&1 &
            $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'
            echo "Emulator started"
      - task: Gradle@2
        inputs:
          workingDirectory: ''
          gradleWrapperFile: 'gradlew'
          gradleOptions: '-Xmx3072m'
          publishJUnitResults: true
          javaHomeOption: 'JDKVersion'
          jdkArchitectureOption: 'x64'
          jdkVersion: 1.11
          #testResultsFiles: '**/TEST-*.xml'
          #testResultsFiles: '*/build/test-results/testReleaseUnitTest/TEST-*.xml'
          tasks: 'assembleRelease'
        env:
          API_WEATHER_FORECAST_RELEASE: $(API_WEATHER_FORECAST_RELEASE)
        - task: Gradle@2
          inputs:
            workingDirectory: '/Users/runner/work/1/s/runner/AndroidJunitRunnerSample'
            gradleWrapperFile: '/Users/runner/work/1/s/runner/AndroidJunitRunnerSample/gradlew'
            gradleOptions: '-Xmx3072m'
            publishJUnitResults: true
            testResultsFiles: '**/TEST-*.xml'
            jdkVersion: 1.11
            tasks: 'createDebugCoverageReport'
        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: |
              find "." -type f -name "*.html"
              find "." -type f -name "*.xml"
        - task: PublishCodeCoverageResults@1
          inputs:
            codeCoverageTool: 'JaCoCo'
            summaryFileLocation: '/Users/runner/work/1/s/runner/AndroidJunitRunnerSample/app/build/reports/coverage/androidTest/debug/report.xml'
            reportDirectory: '/Users/runner/work/1/s/runner/AndroidJunitRunnerSample/app/build/reports/coverage/androidTest/debug/'